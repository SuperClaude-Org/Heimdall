diff --git a/vendor/opencode/packages/opencode/bin/opencode b/vendor/opencode/packages/opencode/bin/opencode
old mode 100755
new mode 100644
index 8f75eb18..b043fa21
--- a/vendor/opencode/packages/opencode/bin/opencode
+++ b/vendor/opencode/packages/opencode/bin/opencode
@@ -1,8 +1,8 @@
 #!/bin/sh
 set -e
 
-if [ -n "$OPENCODE_BIN_PATH" ]; then
-    resolved="$OPENCODE_BIN_PATH"
+if [ -n "$HEIMDALL_BIN_PATH" ]; then
+    resolved="$HEIMDALL_BIN_PATH"
 else
     # Get the real path of this script, resolving any symlinks
     script_path="$0"
@@ -32,9 +32,9 @@ else
         *) arch="$(uname -m)" ;;
     esac
     
-    name="opencode-${platform}-${arch}"
-    binary="opencode"
-    [ "$platform" = "win32" ] && binary="opencode.exe"
+    name="heimdall-${platform}-${arch}"
+    binary="heimdall"
+    [ "$platform" = "win32" ] && binary="heimdall.exe"
     
     # Search for the binary starting from real script location
     resolved=""
@@ -49,7 +49,7 @@ else
     done
     
     if [ -z "$resolved" ]; then
-        printf "It seems that your package manager failed to install the right version of the opencode CLI for your platform. You can try manually installing the \"%s\" package\n" "$name" >&2
+        printf "It seems that your package manager failed to install the right version of the heimdall CLI for your platform. You can try manually installing the \"%s\" package\n" "$name" >&2
         exit 1
     fi
 fi
@@ -58,4 +58,4 @@ fi
 trap '' INT
 
 # Execute the binary with all arguments
-exec "$resolved" "$@"
+exec "$resolved" "$@"
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/agent.ts b/vendor/opencode/packages/opencode/src/cli/cmd/agent.ts
index 0dd6311d..418ee563 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/agent.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/agent.ts
@@ -112,11 +112,11 @@ const AgentCreateCommand = cmd({
       }
 
       const content = matter.stringify(generated.systemPrompt, frontmatter)
-      const filePath = path.join(
-        scope === "global" ? Global.Path.config : path.join(app.path.root, ".opencode"),
-        `agent`,
-        `${generated.identifier}.md`,
+      const dir = path.join(
+        scope === "global" ? Global.Path.config : path.join(app.path.root, ".heimdall"),
+        "agent",
       )
+      const filePath = path.join(dir, `${generated.identifier}.md`)
 
       await Bun.write(filePath, content)
 
@@ -131,4 +131,4 @@ export const AgentCommand = cmd({
   describe: "manage agents",
   builder: (yargs) => yargs.command(AgentCreateCommand).demandCommand(),
   async handler() {},
-})
+})
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/github.ts b/vendor/opencode/packages/opencode/src/cli/cmd/github.ts
index a6f8917a..42d47dc5 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/github.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/github.ts
@@ -123,7 +123,7 @@ type IssueQueryResponse = {
   }
 }
 
-const WORKFLOW_FILE = ".github/workflows/opencode.yml"
+const WORKFLOW_FILE = ".github/workflows/heimdall.yml"
 
 export const GithubCommand = cmd({
   command: "github",
@@ -309,28 +309,31 @@ export const GithubInstallCommand = cmd({
         await Bun.write(
           path.join(app.root, WORKFLOW_FILE),
           `
-name: opencode
+name: heimdall
 
 on:
   issue_comment:
     types: [created]
 
 jobs:
-  opencode:
+  heimdall:
     if: |
-      contains(github.event.comment.body, ' /oc') ||
-      startsWith(github.event.comment.body, '/oc') ||
-      contains(github.event.comment.body, ' /opencode') ||
-      startsWith(github.event.comment.body, '/opencode')
+      github.event.issue.pull_request &&
+      (
+      contains(github.event.comment.body, ' /heimdall') ||
+      startsWith(github.event.comment.body, '/heimdall')
+      )
     runs-on: ubuntu-latest
     permissions:
-      contents: read
+      contents: write
+      pull-requests: write
+      issues: write
       id-token: write
     steps:
       - name: Checkout repository
         uses: actions/checkout@v4
 
-      - name: Run opencode
+      - name: Run heimdall
         uses: sst/opencode/github@latest${envStr}
         with:
           model: ${provider}/${model}
@@ -401,7 +404,7 @@ export const GithubRunCommand = cmd({
         const comment = await createComment()
         commentId = comment.data.id
 
-        // Setup opencode session
+        // Setup heimdall session
         const repoData = await fetchRepo()
         session = await Session.create()
         subscribeSessionEvents()
@@ -411,7 +414,7 @@ export const GithubRunCommand = cmd({
           await Session.share(session.id)
           return session.id.slice(-8)
         })()
-        console.log("opencode session", session.id)
+        console.log("heimdall session", session.id)
 
         // Handle 3 cases
         // 1. Issue
@@ -511,9 +514,9 @@ export const GithubRunCommand = cmd({
       async function getUserPrompt() {
         let prompt = (() => {
           const body = payload.comment.body.trim()
-          if (body === "/opencode" || body === "/oc") return "Summarize this thread"
-          if (body.includes("/opencode") || body.includes("/oc")) return body
-          throw new Error("Comments must mention `/opencode` or `/oc`")
+          if (body === "/heimdall" || body === "/hd") return "Summarize this thread"
+          if (body.includes("/heimdall") || body.includes("/hd")) return body
+          throw new Error("Comments must mention `/heimdall` or `/hd`")
         })()
 
         // Handle images
@@ -634,7 +637,7 @@ export const GithubRunCommand = cmd({
       }
 
       async function chat(message: string, files: PromptFiles = []) {
-        console.log("Sending message to opencode...")
+        console.log("Sending message to heimdall...")
 
         const result = await Session.chat({
           sessionID: session.id,
@@ -733,8 +736,8 @@ export const GithubRunCommand = cmd({
 
         await $`git config --local --unset-all ${config}`
         await $`git config --local ${config} "AUTHORIZATION: basic ${newCredentials}"`
-        await $`git config --global user.name "opencode-agent[bot]"`
-        await $`git config --global user.email "opencode-agent[bot]@users.noreply.github.com"`
+        await $`git config --global user.name "heimdall-agent[bot]"`
+        await $`git config --global user.email "heimdall-agent[bot]@users.noreply.github.com"`
       }
 
       async function restoreGitConfig() {
@@ -779,7 +782,7 @@ export const GithubRunCommand = cmd({
           .replace(/\.\d{3}Z/, "")
           .split("T")
           .join("")
-        return `opencode/${type}${issueId}-${timestamp}`
+        return `heimdall/${type}${issueId}-${timestamp}`
       }
 
       async function pushToNewBranch(summary: string, branch: string) {
@@ -1105,4 +1108,4 @@ query($owner: String!, $repo: String!, $number: Int!) {
       }
     })
   },
-})
+})
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/mcp.ts b/vendor/opencode/packages/opencode/src/cli/cmd/mcp.ts
index df0046b2..b4bc3d0f 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/mcp.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/mcp.ts
@@ -43,7 +43,7 @@ export const McpAddCommand = cmd({
     if (type === "local") {
       const command = await prompts.text({
         message: "Enter command to run",
-        placeholder: "e.g., opencode x @modelcontextprotocol/server-filesystem",
+        placeholder: "e.g., heimdall x @modelcontextprotocol/server-filesystem",
         validate: (x) => (x && x.length > 0 ? undefined : "Required"),
       })
       if (prompts.isCancel(command)) throw new UI.CancelledError()
@@ -67,7 +67,7 @@ export const McpAddCommand = cmd({
       if (prompts.isCancel(url)) throw new UI.CancelledError()
 
       const client = new Client({
-        name: "opencode",
+        name: "heimdall",
         version: "1.0.0",
       })
       const transport = new StreamableHTTPClientTransport(new URL(url))
@@ -77,4 +77,4 @@ export const McpAddCommand = cmd({
 
     prompts.outro("MCP server added successfully")
   },
-})
+})
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/run.ts b/vendor/opencode/packages/opencode/src/cli/cmd/run.ts
index fc8df2ab..5cade541 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/run.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/run.ts
@@ -24,10 +24,10 @@ const TOOL: Record<string, [string, string]> = {
   websearch: ["Search", UI.Style.TEXT_DIM_BOLD],
 }
 
-export const RunCommand = cmd({
+export const RunCommand = {
   command: "run [message..]",
-  describe: "run opencode with a message",
-  builder: (yargs: Argv) => {
+  describe: "run heimdall with a message",
+  builder: (yargs: any) => {
     return yargs
       .positional("message", {
         describe: "message to send",
@@ -190,4 +190,4 @@ export const RunCommand = cmd({
       UI.empty()
     })
   },
-})
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/serve.ts b/vendor/opencode/packages/opencode/src/cli/cmd/serve.ts
index 0e13ddbd..5a34caf8 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/serve.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/serve.ts
@@ -3,9 +3,10 @@ import { Server } from "../../server/server"
 import { bootstrap } from "../bootstrap"
 import { cmd } from "./cmd"
 
-export const ServeCommand = cmd({
+export const ServeCommand = {
   command: "serve",
-  builder: (yargs) =>
+  describe: "starts a headless heimdall server",
+  builder: (yargs: any) => {
     yargs
       .option("port", {
         alias: ["p"],
@@ -18,8 +19,8 @@ export const ServeCommand = cmd({
         type: "string",
         describe: "hostname to listen on",
         default: "127.0.0.1",
-      }),
-  describe: "starts a headless opencode server",
+      })
+  },
   handler: async (args) => {
     const cwd = process.cwd()
     await bootstrap({ cwd }, async () => {
@@ -28,19 +29,8 @@ export const ServeCommand = cmd({
         return "needs_provider"
       }
 
-      const hostname = args.hostname
-      const port = args.port
-
-      const server = Server.listen({
-        port,
-        hostname,
-      })
-
-      console.log(`opencode server listening on http://${server.hostname}:${server.port}`)
-
-      await new Promise(() => {})
-
-      server.stop()
+      const server = await Server.start(args.port, args.hostname)
+      console.log(`heimdall server listening on http://${server.hostname}:${server.port}`)
     })
   },
-})
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/tui.ts b/vendor/opencode/packages/opencode/src/cli/cmd/tui.ts
index 30e861db..2188dda4 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/tui.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/tui.ts
@@ -26,14 +26,14 @@ if (typeof OPENCODE_TUI_PATH !== "undefined") {
   })
 }
 
-export const TuiCommand = cmd({
-  command: "$0 [project]",
-  describe: "start opencode tui",
-  builder: (yargs) =>
-    yargs
+export const TuiCommand = {
+  command: ["$0 [project]"],
+  describe: "start heimdall tui",
+  builder: (yargs: any) => {
+    return yargs
       .positional("project", {
         type: "string",
-        describe: "path to start opencode in",
+        describe: "path to start heimdall in",
       })
       .option("model", {
         type: "string",
@@ -69,7 +69,8 @@ export const TuiCommand = cmd({
         type: "string",
         describe: "hostname to listen on",
         default: "127.0.0.1",
-      }),
+      })
+  },
   handler: async (args) => {
     while (true) {
       const cwd = args.project ? path.resolve(args.project) : process.cwd()
@@ -191,7 +192,7 @@ export const TuiCommand = cmd({
       }
     }
   },
-})
+}
 
 /**
  * Get the correct command to run opencode CLI
@@ -213,4 +214,4 @@ function getOpencodeCommand(): string[] {
 
   // In production, use the current executable path
   return [process.execPath]
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/cmd/upgrade.ts b/vendor/opencode/packages/opencode/src/cli/cmd/upgrade.ts
index 75db36a9..971b0fc6 100644
--- a/vendor/opencode/packages/opencode/src/cli/cmd/upgrade.ts
+++ b/vendor/opencode/packages/opencode/src/cli/cmd/upgrade.ts
@@ -5,7 +5,7 @@ import { Installation } from "../../installation"
 
 export const UpgradeCommand = {
   command: "upgrade [target]",
-  describe: "upgrade opencode to the latest or a specific version",
+  describe: "upgrade heimdall to the latest or a specific version",
   builder: (yargs: Argv) => {
     return yargs
       .positional("target", {
@@ -27,7 +27,8 @@ export const UpgradeCommand = {
     const detectedMethod = await Installation.method()
     const method = (args.method as Installation.Method) ?? detectedMethod
     if (method === "unknown") {
-      prompts.log.error(`opencode is installed to ${process.execPath} and seems to be managed by a package manager`)
+      prompts.log.error(`heimdall is installed to ${process.execPath} and seems to be managed by a package manager`)
+      prompts.log.error("you can upgrade using the package manager that you used to install it")
       prompts.outro("Done")
       return
     }
@@ -35,7 +36,7 @@ export const UpgradeCommand = {
     const target = args.target ? args.target.replace(/^v/, "") : await Installation.latest()
 
     if (Installation.VERSION === target) {
-      prompts.log.warn(`opencode upgrade skipped: ${target} is already installed`)
+      prompts.log.warn(`heimdall upgrade skipped: ${target} is already installed`)
       prompts.outro("Done")
       return
     }
@@ -54,4 +55,4 @@ export const UpgradeCommand = {
     spinner.stop("Upgrade complete")
     prompts.outro("Done")
   },
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/error.ts b/vendor/opencode/packages/opencode/src/cli/error.ts
index fa77ca77..8850ddb1 100644
--- a/vendor/opencode/packages/opencode/src/cli/error.ts
+++ b/vendor/opencode/packages/opencode/src/cli/error.ts
@@ -4,7 +4,7 @@ import { UI } from "./ui"
 
 export function FormatError(input: unknown) {
   if (MCP.Failed.isInstance(input))
-    return `MCP server "${input.data.name}" failed. Note, opencode does not support MCP authentication yet.`
+    return `MCP server "${input.data.name}" failed. Note, heimdall does not support MCP authentication yet.`
   if (Config.JsonError.isInstance(input)) {
     return (
       `Config file at ${input.data.path} is not valid JSON(C)` + (input.data.message ? `: ${input.data.message}` : "")
@@ -17,4 +17,4 @@ export function FormatError(input: unknown) {
     ].join("\n")
 
   if (UI.CancelledError.isInstance(input)) return ""
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/cli/ui.ts b/vendor/opencode/packages/opencode/src/cli/ui.ts
index 0fa4d1ce..3f4b7b4f 100644
--- a/vendor/opencode/packages/opencode/src/cli/ui.ts
+++ b/vendor/opencode/packages/opencode/src/cli/ui.ts
@@ -4,9 +4,9 @@ import { NamedError } from "../util/error"
 
 export namespace UI {
   const LOGO = [
-    [`█▀▀█ █▀▀█ █▀▀ █▀▀▄ `, `█▀▀ █▀▀█ █▀▀▄ █▀▀`],
-    [`█░░█ █░░█ █▀▀ █░░█ `, `█░░ █░░█ █░░█ █▀▀`],
-    [`▀▀▀▀ █▀▀▀ ▀▀▀ ▀  ▀ `, `▀▀▀ ▀▀▀▀ ▀▀▀  ▀▀▀`],
+    [`╦ ╦╔═╗╦╔╦╗╔╦╗╔═╗╦  ╦  `, ``],
+    [`╠═╣║╣ ║║║║ ║║╠═╣║  ║  `, ``],
+    [`╩ ╩╚═╝╩╩ ╩═╩╝╩ ╩╩═╝╩═╝`, ``],
   ]
 
   export const CancelledError = NamedError.create("UICancelledError", z.void())
@@ -80,4 +80,4 @@ export namespace UI {
   export function markdown(text: string): string {
     return text
   }
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/config/config.ts b/vendor/opencode/packages/opencode/src/config/config.ts
index b49912f3..3b9bc72b 100644
--- a/vendor/opencode/packages/opencode/src/config/config.ts
+++ b/vendor/opencode/packages/opencode/src/config/config.ts
@@ -21,7 +21,7 @@ export namespace Config {
   export const state = App.state("config", async (app) => {
     const auth = await Auth.all()
     let result = await global()
-    for (const file of ["opencode.jsonc", "opencode.json"]) {
+    for (const file of ["heimdall.jsonc", "heimdall.json"]) {
       const found = await Filesystem.findUp(file, app.path.cwd, app.path.root)
       for (const resolved of found.toReversed()) {
         result = mergeDeep(result, await loadFile(resolved))
@@ -45,7 +45,7 @@ export namespace Config {
     result.agent = result.agent || {}
     const markdownAgents = [
       ...(await Filesystem.globUp("agent/*.md", Global.Path.config, Global.Path.config)),
-      ...(await Filesystem.globUp(".opencode/agent/*.md", app.path.cwd, app.path.root)),
+      ...(await Filesystem.globUp(".heimdall/agent/*.md", app.path.cwd, app.path.root)),
     ]
     for (const item of markdownAgents) {
       const content = await Bun.file(item).text()
@@ -71,7 +71,7 @@ export namespace Config {
     result.mode = result.mode || {}
     const markdownModes = [
       ...(await Filesystem.globUp("mode/*.md", Global.Path.config, Global.Path.config)),
-      ...(await Filesystem.globUp(".opencode/mode/*.md", app.path.cwd, app.path.root)),
+      ...(await Filesystem.globUp(".heimdall/mode/*.md", app.path.cwd, app.path.root)),
     ]
     for (const item of markdownModes) {
       const content = await Bun.file(item).text()
@@ -106,7 +106,7 @@ export namespace Config {
     result.plugin.push(
       ...[
         ...(await Filesystem.globUp("plugin/*.{ts,js}", Global.Path.config, Global.Path.config)),
-        ...(await Filesystem.globUp(".opencode/plugin/*.{ts,js}", app.path.cwd, app.path.root)),
+        ...(await Filesystem.globUp(".heimdall/plugin/*.{ts,js}", app.path.cwd, app.path.root)),
       ].map((x) => "file://" + x),
     )
 
@@ -394,9 +394,8 @@ export namespace Config {
   export const global = lazy(async () => {
     let result: Info = pipe(
       {},
-      mergeDeep(await loadFile(path.join(Global.Path.config, "config.json"))),
-      mergeDeep(await loadFile(path.join(Global.Path.config, "opencode.json"))),
-      mergeDeep(await loadFile(path.join(Global.Path.config, "opencode.jsonc"))),
+      mergeDeep(await loadFile(path.join(Global.Path.config, "heimdall.json"))),
+      mergeDeep(await loadFile(path.join(Global.Path.config, "heimdall.jsonc"))),
     )
 
     await import(path.join(Global.Path.config, "config"), {
@@ -532,4 +531,4 @@ export namespace Config {
   export function get() {
     return state()
   }
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/global/index.ts b/vendor/opencode/packages/opencode/src/global/index.ts
index b5379347..2f426d8a 100644
--- a/vendor/opencode/packages/opencode/src/global/index.ts
+++ b/vendor/opencode/packages/opencode/src/global/index.ts
@@ -2,21 +2,16 @@ import fs from "fs/promises"
 import { xdgData, xdgCache, xdgConfig, xdgState } from "xdg-basedir"
 import path from "path"
 
-const app = "opencode"
-
-const data = path.join(xdgData!, app)
-const cache = path.join(xdgCache!, app)
-const config = path.join(xdgConfig!, app)
-const state = path.join(xdgState!, app)
-
 export namespace Global {
+  const app = "heimdall"
+
   export const Path = {
-    data,
-    bin: path.join(data, "bin"),
-    log: path.join(data, "log"),
-    cache,
-    config,
-    state,
+    data: path.join(xdgData!, app),
+    bin: path.join(xdgData!, app, "bin"),
+    log: path.join(xdgData!, app, "log"),
+    cache: path.join(xdgCache!, app),
+    config: path.join(xdgConfig!, app),
+    state: path.join(xdgState!, app),
   } as const
 }
 
@@ -37,4 +32,4 @@ const version = await Bun.file(path.join(Global.Path.cache, "version"))
 if (version !== CACHE_VERSION) {
   await fs.rm(Global.Path.cache, { recursive: true, force: true })
   await Bun.file(path.join(Global.Path.cache, "version")).write(CACHE_VERSION)
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/index.ts b/vendor/opencode/packages/opencode/src/index.ts
index d201c704..4b493bab 100644
--- a/vendor/opencode/packages/opencode/src/index.ts
+++ b/vendor/opencode/packages/opencode/src/index.ts
@@ -18,6 +18,7 @@ import { DebugCommand } from "./cli/cmd/debug"
 import { StatsCommand } from "./cli/cmd/stats"
 import { McpCommand } from "./cli/cmd/mcp"
 import { GithubCommand } from "./cli/cmd/github"
+import { Config } from "./config"
 
 const cancel = new AbortController()
 
@@ -63,7 +64,7 @@ const cli = yargs(hideBin(process.argv))
 
     process.env["OPENCODE"] = "1"
 
-    Log.Default.info("opencode", {
+    Log.Default.info("heimdall", {
       version: Installation.VERSION,
       args: process.argv.slice(2),
     })
diff --git a/vendor/opencode/packages/opencode/src/installation/index.ts b/vendor/opencode/packages/opencode/src/installation/index.ts
index 343d9615..2a8d201c 100644
--- a/vendor/opencode/packages/opencode/src/installation/index.ts
+++ b/vendor/opencode/packages/opencode/src/installation/index.ts
@@ -49,7 +49,7 @@ export namespace Installation {
   }
 
   export async function method() {
-    if (process.execPath.includes(path.join(".opencode", "bin"))) return "curl"
+    if (process.execPath.includes(path.join(".heimdall", "bin"))) return "curl"
     const exec = process.execPath.toLowerCase()
 
     const checks = [
@@ -136,7 +136,7 @@ export namespace Installation {
   }
 
   export const VERSION = typeof OPENCODE_VERSION === "string" ? OPENCODE_VERSION : "dev"
-  export const USER_AGENT = `opencode/${VERSION}`
+  export const USER_AGENT = `heimdall/${VERSION}`
 
   export async function latest() {
     return fetch("https://api.github.com/repos/sst/opencode/releases/latest")
@@ -149,4 +149,4 @@ export namespace Installation {
         return data.tag_name.slice(1) as string
       })
   }
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/mcp/index.ts b/vendor/opencode/packages/opencode/src/mcp/index.ts
index 664111fb..a00bab8d 100644
--- a/vendor/opencode/packages/opencode/src/mcp/index.ts
+++ b/vendor/opencode/packages/opencode/src/mcp/index.ts
@@ -99,8 +99,7 @@ export namespace MCP {
               args,
               env: {
                 ...process.env,
-                ...(cmd === "opencode" ? { BUN_BE_BUN: "1" } : {}),
-                ...mcp.environment,
+                ...(cmd === "heimdall" ? { BUN_BE_BUN: "1" } : {}),
               },
             }),
           }).catch((error) => {
@@ -155,4 +154,4 @@ export namespace MCP {
     }
     return result
   }
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/provider/provider.ts b/vendor/opencode/packages/opencode/src/provider/provider.ts
index f32231c5..8d4bb263 100644
--- a/vendor/opencode/packages/opencode/src/provider/provider.ts
+++ b/vendor/opencode/packages/opencode/src/provider/provider.ts
@@ -208,7 +208,7 @@ export namespace Provider {
         options: {
           headers: {
             "HTTP-Referer": "https://opencode.ai/",
-            "X-Title": "opencode",
+            "X-Title": "heimdall",
           },
         },
       }
@@ -219,7 +219,7 @@ export namespace Provider {
         options: {
           headers: {
             "http-referer": "https://opencode.ai/",
-            "x-title": "opencode",
+            "x-title": "heimdall",
           },
         },
       }
@@ -505,4 +505,4 @@ export namespace Provider {
       providerID: z.string(),
     }),
   )
-}
+}
\ No newline at end of file
diff --git a/vendor/opencode/packages/opencode/src/server/server.ts b/vendor/opencode/packages/opencode/src/server/server.ts
index b81b357a..a258cf82 100644
--- a/vendor/opencode/packages/opencode/src/server/server.ts
+++ b/vendor/opencode/packages/opencode/src/server/server.ts
@@ -20,6 +20,7 @@ import { callTui, TuiRoute } from "./tui"
 import { Permission } from "../permission"
 import { lazy } from "../util/lazy"
 import { Agent } from "../agent/agent"
+import { Installation } from "../installation"
 
 const ERRORS = {
   400: {
@@ -84,9 +85,9 @@ export namespace Server {
         openAPISpecs(app, {
           documentation: {
             info: {
-              title: "opencode",
-              version: "0.0.3",
-              description: "opencode api",
+              title: "heimdall",
+              version: Installation.VERSION,
+              description: "heimdall api",
             },
             openapi: "3.0.0",
           },
@@ -1129,9 +1130,9 @@ export namespace Server {
     const result = await generateSpecs(a, {
       documentation: {
         info: {
-          title: "opencode",
-          version: "1.0.0",
-          description: "opencode api",
+          title: "heimdall",
+          version: Installation.VERSION,
+          description: "heimdall api",
         },
         openapi: "3.0.0",
       },
@@ -1148,4 +1149,4 @@ export namespace Server {
     })
     return server
   }
-}
+}
\ No newline at end of file
